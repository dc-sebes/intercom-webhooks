from flask import Flask, request, jsonify
import os
import sys
from asana_client import AsanaClient
from intercom_client import IntercomClient

app = Flask(__name__)

# –°–ø–∏—Å–æ–∫ email'–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –≤ Asana
EXCLUDED_EMAILS = [
    "i.konovalov@sebestech.com",
    "f.veips@sebestech.com",
    "help@sebestech.com",
    "support@sebestech.com",
    "compliance@sebestech.com",
    "k.danyleyko@sebestech.com",
    "n.rozkalns@sebestech.com",
    "a.vaver@sebestech.com",
    "d.ciruks@sebestech.com"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Asana –∫–ª–∏–µ–Ω—Ç–∞
print("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Asana –∫–ª–∏–µ–Ω—Ç–∞ ===")
print(f"ASANA_ACCESS_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bool(os.environ.get('ASANA_ACCESS_TOKEN'))}")
print(f"ASANA_PROJECT_GID: {os.environ.get('ASANA_PROJECT_GID', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
print(f"ASANA_TARGET_SECTION_GID: {os.environ.get('ASANA_TARGET_SECTION_GID', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
print(f"–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ email'—ã: {EXCLUDED_EMAILS}")

asana_client = None
try:
    if os.environ.get('ASANA_ACCESS_TOKEN'):
        print("–°–æ–∑–¥–∞–Ω–∏–µ AsanaClient...")
        asana_client = AsanaClient()
        print("‚úÖ Asana –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"–ü—Ä–æ–µ–∫—Ç: {asana_client.project_gid}")
        print(f"–¶–µ–ª–µ–≤–∞—è —Å–µ–∫—Ü–∏—è: {asana_client.target_section_gid}")
    else:
        print("‚ùå Asana –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ASANA_ACCESS_TOKEN")
except Exception as e:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Asana –∫–ª–∏–µ–Ω—Ç–∞:")
    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    import traceback
    print(f"   –ü–æ–ª–Ω—ã–π traceback:")
    traceback.print_exc()
    asana_client = None

print("=== –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Asana –∫–ª–∏–µ–Ω—Ç–∞ ===\n")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Intercom –∫–ª–∏–µ–Ω—Ç–∞
print("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Intercom –∫–ª–∏–µ–Ω—Ç–∞ ===")
print(f"INTERCOM_ACCESS_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bool(os.environ.get('INTERCOM_ACCESS_TOKEN'))}")

intercom_client = None
try:
    if os.environ.get('INTERCOM_ACCESS_TOKEN'):
        print("–°–æ–∑–¥–∞–Ω–∏–µ IntercomClient...")
        intercom_client = IntercomClient()
        print("‚úÖ Intercom –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå Intercom –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç INTERCOM_ACCESS_TOKEN")
except Exception as e:
    print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Intercom –∫–ª–∏–µ–Ω—Ç–∞:")
    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    import traceback
    print(f"   –ü–æ–ª–Ω—ã–π traceback:")
    traceback.print_exc()
    intercom_client = None

print("=== –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Intercom –∫–ª–∏–µ–Ω—Ç–∞ ===\n")

def generate_asana_task_url(project_gid, task_gid):
    return f"https://app.asana.com/0/{project_gid}/{task_gid}"

def extract_current_reply_author_email(webhook_data):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∞–≤—Ç–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ webhook Intercom
    """
    try:
        item = webhook_data.get('data', {}).get('item', {})
        conversation_parts = item.get('conversation_parts', {}).get('conversation_parts', [])

        if conversation_parts:
            latest_part = conversation_parts[0]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
            author = latest_part.get('author', {})
            return author.get('email')

        return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ email –∞–≤—Ç–æ—Ä–∞: {e}")
        return None


def should_skip_processing(webhook_data):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É webhook'–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ email –∞–≤—Ç–æ—Ä–∞
    """
    author_email = extract_current_reply_author_email(webhook_data)

    if not author_email:
        print("‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å email –∞–≤—Ç–æ—Ä–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return False

    if author_email.lower() in [email.lower() for email in EXCLUDED_EMAILS]:
        print(f"üö´ Email –∞–≤—Ç–æ—Ä–∞ '{author_email}' –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        return True

    print(f"‚úÖ Email –∞–≤—Ç–æ—Ä–∞ '{author_email}' –ù–ï –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
    return False


@app.route('/test-asana', methods=['GET'])
def test_asana():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Asana
    """
    if not asana_client:
        return jsonify({
            "error": "Asana client not initialized",
            "suggestion": "Check/debug endpoint for environment variables"
        }), 500

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        user_info = asana_client.get_user_info()

        if not user_info:
            return jsonify({
                "error": "Could not get user info from Asana API"
            }), 500

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        tasks = asana_client.get_project_tasks()

        return jsonify({
            "asana_connection": "OK",
            "user_info": {
                "name": user_info.get('name'),
                "email": user_info.get('email'),
                "gid": user_info.get('gid')
            },
            "project_info": {
                "project_gid": asana_client.project_gid,
                "tasks_count": len(tasks),
                "sample_tasks": [{"gid": t["gid"], "name": t["name"]} for t in tasks[:3]]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏
            },
            "target_section_gid": asana_client.target_section_gid
        }), 200

    except Exception as e:
        return jsonify({
            "error": f"Asana API Error: {type(e).__name__}: {str(e)}",
            "suggestion": "Check your Asana token and project GID"
        }), 500

@app.route('/test-intercom', methods=['GET'])
def test_intercom():
    if not intercom_client:
        return jsonify({
            "error": "Intercom client not initialized",
            "suggestion": "Check your Intercom token"
        }), 500

    try:
        me_info = intercom_client.intercom_me()
    except Exception as e:
        return jsonify({
            "error": f"Intercom API Error: {type(e).__name__}: {str(e)}",
            "suggestion": "Check your Intercom token"
        }), 500

    return jsonify({
        "me": me_info
    }), 200

@app.route('/debug', methods=['GET'])
def debug_env():
    """
    –î–µ–±–∞–≥-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    env_vars = {
        "ASANA_ACCESS_TOKEN": "***–°–ö–†–´–¢–û***" if os.environ.get('ASANA_ACCESS_TOKEN') else "–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù",
        "ASANA_PROJECT_GID": os.environ.get('ASANA_PROJECT_GID', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'),
        "ASANA_TARGET_SECTION_GID": os.environ.get('ASANA_TARGET_SECTION_GID', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'),
        "PORT": os.environ.get('PORT', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'),
        "DEBUG": os.environ.get('DEBUG', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'),
        "INTERCOM_ACCESS_TOKEN": os.environ.get('INTERCOM_ACCESS_TOKEN', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')
    }

    return jsonify({
        "environment_variables": env_vars,
        "asana_client_initialized": asana_client is not None,
        "all_env_vars_count": len(os.environ),
        "python_version": sys.version
    }), 200


@app.route('/intercom-webhook', methods=['POST'])
def handle_webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç Intercom"""
    try:
        data = request.json
        if not data:
            print("–ù–µ—Ç JSON –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return jsonify({"status": "no data"}), 400

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook'–∞
        conversation_id = data.get('data', {}).get('item', {}).get('id')
        topic = data.get('topic')

        print(f"–ü–æ–ª—É—á–µ–Ω webhook - Topic: {topic}, Conversation ID: {conversation_id}")
        print(f"–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ webhook: {data}")

        if not asana_client:
            print("Asana –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return jsonify({"status": "error", "message": "Asana client not configured"}), 500

        if not intercom_client:
            print("Intercom –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return jsonify({"status": "error", "message": "Intercom client not configured"}), 500

        if not conversation_id:
            print("Conversation ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ webhook –¥–∞–Ω–Ω—ã—Ö")
            return jsonify({"status": "ok", "message": "No conversation ID found"}), 200

        task = asana_client.find_task_by_conversation_id(conversation_id)

        if task:
            print(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task['name']} (GID: {task['gid']})")

            asana_task_url = generate_asana_task_url(asana_client.project_gid, task['gid'])
            print(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É –≤ Asana: {asana_task_url}")

            link_result = intercom_client.set_conversation_asana_link(conversation_id, asana_task_url)
            if link_result:
                print(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É –≤ Asana —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è Conversation ID {conversation_id}")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –≤ Asana –¥–ª—è Conversation ID {conversation_id}")

            if should_skip_processing(data):
                return jsonify({
                    "status": "skipped",
                    "reason": "Author email in exclusion list",
                    "conversation_id": conversation_id,
                    "topic": topic
                }), 200

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ü–µ–ª–µ–≤—É—é —Å–µ–∫—Ü–∏—é
            success = asana_client.move_task_to_section(task['gid'])

            if success:
                return jsonify({
                    "status": "ok",
                    "task_moved": True,
                    "task_gid": task['gid'],
                    "task_name": task['name'],
                    "conversation_id": conversation_id
                }), 200
            else:
                return jsonify({
                    "status": "ok",
                    "task_moved": False,
                    "task_found": True,
                    "task_gid": task['gid'],
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É"
                }), 200

        else:
            print(f"–ó–∞–¥–∞—á–∞ —Å Conversation ID {conversation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return jsonify({
                "status": "ok",
                "task_found": False,
                "conversation_id": conversation_id,
                "message": f"Task with conversation ID {conversation_id} not found"
            }), 200

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/health', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
    """
    status = {
        "status": "healthy",
        "asana_client_configured": asana_client is not None,
        "environment_check": {
            "ASANA_ACCESS_TOKEN": bool(os.environ.get('ASANA_ACCESS_TOKEN')),
            "ASANA_PROJECT_GID": bool(os.environ.get('ASANA_PROJECT_GID')),
            "ASANA_TARGET_SECTION_GID": bool(os.environ.get('ASANA_TARGET_SECTION_GID')),
        }
    }

    if asana_client:
        status.update({
            "project_gid": asana_client.project_gid,
            "target_section_configured": asana_client.target_section_gid is not None
        })

    return jsonify(status), 200


@app.route('/test-search/<conversation_id>', methods=['GET'])
def test_search(conversation_id):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ conversation ID
    """
    if not asana_client:
        return jsonify({"error": "Asana client not configured"}), 400

    task = asana_client.find_task_by_conversation_id(conversation_id)

    if task:
        return jsonify({
            "found": True,
            "task": task
        }), 200
    else:
        return jsonify({
            "found": False,
            "conversation_id": conversation_id
        }), 404


@app.route('/', methods=['GET', 'POST'])
def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    if request.method == 'GET':
        return jsonify({
            "message": "Intercom Webhook Handler",
            "endpoints": {
                "webhook": "/intercom-webhook",
                "health": "/health",
                "debug": "/debug",
                "test_asana": "/test-asana",
                "test_search": "/test-search/<conversation_id>"
            }
        }), 200
    elif request.method == 'POST':
        return handle_webhook()


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    debug = os.environ.get('DEBUG', 'False').lower() == 'true'
    print(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"Debug —Ä–µ–∂–∏–º: {debug}")
    print(f"Asana –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {asana_client is not None}")
    app.run(host='0.0.0.0', port=port, debug=debug)
